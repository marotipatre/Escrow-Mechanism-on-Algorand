{
  "version": 3,
  "sources": [
    "../../escrow_contract/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;AAAA;;AAyGK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA/EL;;;AAAA;;;AA+EK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA9BL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8BK;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAZL;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAYK;;;AAAA;;AAAL;;;AASQ;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACqB;;AAAA;;AAAA;AAArB;;AAAA;AAAA;AACA;;AAAmB;AAAnB;AACA;AAAkB;AAAlB;;AAGR;;;AAEe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;AAAA;AAAA;AAAA;AAAlB;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;;AAGR;;;AAEe;;AAAA;AAAe;AAAA;AAAA;AAAA;AAAY;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAA3B;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAGA;AACa;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;;;;;AAFX;;;AAGQ;;;AAHR;AAOA;AAAkB;AAAlB;;;;;;AAGR;;;AAEe;;AAAA;AAAe;AAAA;AAAA;AAAA;AAAa;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAA5B;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAGA;AACa;AAAA;AAAA;AAAA;AACF;AAAA;AAAA;AAAA;;;;;AAFX;;;AAGQ;;;AAHR;AAOA;AAAkB;AAAlB;;;;;;AAGR;;;AAEe;;AAAA;AAAe;AAAA;AAAA;AAAA;AAAY;AAAA;AAAA;AAAA;AAAA;;AAAA;AAA3B;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;;;;AAAP;AACW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEA;;AAAmB;AAAnB;;;;;;AAGR;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACO;AAAA;;AAAA;AAAA;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAEG;;AAAY;;;;;;;;;;;;;;;;;;;AAAZ;AAAX;;;AACY;;;AAOJ;AAAkB;AAAlB;;AANK;;AAAY;;;;;;;;;;;;;;;;;AAAZ;AAAb;AACY;;;;;;AAUG;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAGA;;;;AAKO;AAAA;AAAA;AAAA;AAAP;AACO;;AAAc;;AAAd;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000"
    },
    "7": {
      "op": "bytecblock \"is_settled\" \"buyer\" \"value\" \"seller\" \"arbitrator\" \"is_disputed\" \"escrow_expiry\""
    },
    "76": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "78": {
      "op": "bz main_after_if_else@14",
      "stack_out": []
    },
    "81": {
      "op": "pushbytess 0x3fe4d39a 0xfdc695c2 0x31ce7597 0x34c979c9 0x4398265d 0x91b4532a 0x5121f741 0x33b3499e // method \"create_application(uint64,account,account,account,uint64)void\", method \"deposit_funds(pay)void\", method \"release_funds_to_seller()void\", method \"refund_funds_to_buyer()void\", method \"raise_dispute()void\", method \"resolve_dispute(string)void\", method \"expire_escrow()void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(create_application(uint64,account,account,account,uint64)void)",
        "Method(delete_application()void)",
        "Method(deposit_funds(pay)void)",
        "Method(expire_escrow()void)",
        "Method(raise_dispute()void)",
        "Method(refund_funds_to_buyer()void)",
        "Method(release_funds_to_seller()void)",
        "Method(resolve_dispute(string)void)"
      ],
      "stack_out": [
        "Method(create_application(uint64,account,account,account,uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(release_funds_to_seller()void)",
        "Method(refund_funds_to_buyer()void)",
        "Method(raise_dispute()void)",
        "Method(resolve_dispute(string)void)",
        "Method(expire_escrow()void)",
        "Method(delete_application()void)"
      ]
    },
    "123": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_application(uint64,account,account,account,uint64)void)",
        "Method(delete_application()void)",
        "Method(deposit_funds(pay)void)",
        "Method(expire_escrow()void)",
        "Method(raise_dispute()void)",
        "Method(refund_funds_to_buyer()void)",
        "Method(release_funds_to_seller()void)",
        "Method(resolve_dispute(string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(uint64,account,account,account,uint64)void)",
        "Method(deposit_funds(pay)void)",
        "Method(release_funds_to_seller()void)",
        "Method(refund_funds_to_buyer()void)",
        "Method(raise_dispute()void)",
        "Method(resolve_dispute(string)void)",
        "Method(expire_escrow()void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "126": {
      "op": "match main_create_application_route@3 main_deposit_funds_route@4 main_release_funds_to_seller_route@5 main_refund_funds_to_buyer_route@6 main_raise_dispute_route@7 main_resolve_dispute_route@8 main_expire_escrow_route@9 main_delete_application_route@10",
      "stack_out": []
    },
    "144": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "145": {
      "op": "return",
      "stack_out": []
    },
    "146": {
      "block": "main_delete_application_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "148": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0",
        "DeleteApplication"
      ]
    },
    "150": {
      "op": "==",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "151": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "152": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "154": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "155": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.delete_application",
      "op": "callsub delete_application"
    },
    "158": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    },
    "160": {
      "block": "main_expire_escrow_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "162": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "163": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "164": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "166": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "167": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.expire_escrow",
      "op": "callsub expire_escrow"
    },
    "170": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "171": {
      "op": "return",
      "stack_out": []
    },
    "172": {
      "block": "main_resolve_dispute_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "174": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "175": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "176": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "178": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "179": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "182": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "185": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.resolve_dispute",
      "op": "callsub resolve_dispute",
      "stack_out": []
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "block": "main_raise_dispute_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "192": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "193": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "196": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "197": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.raise_dispute",
      "op": "callsub raise_dispute"
    },
    "200": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "201": {
      "op": "return",
      "stack_out": []
    },
    "202": {
      "block": "main_refund_funds_to_buyer_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "204": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "205": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "206": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "208": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "209": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.refund_funds_to_buyer",
      "op": "callsub refund_funds_to_buyer"
    },
    "212": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "213": {
      "op": "return",
      "stack_out": []
    },
    "214": {
      "block": "main_release_funds_to_seller_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "216": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "217": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "218": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "220": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "221": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.release_funds_to_seller",
      "op": "callsub release_funds_to_seller"
    },
    "224": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "225": {
      "op": "return",
      "stack_out": []
    },
    "226": {
      "block": "main_deposit_funds_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "228": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "229": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "230": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "232": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "233": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "236": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "237": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "238": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "240": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "241": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "242": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "243": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.deposit_funds",
      "op": "callsub deposit_funds",
      "stack_out": []
    },
    "246": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "247": {
      "op": "return",
      "stack_out": []
    },
    "248": {
      "block": "main_create_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "250": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "251": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "252": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "254": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "255": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "256": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "259": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "260": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "263": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "264": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "266": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "269": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "270": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "272": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "275": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "276": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "281": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "282": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "285": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "286": {
      "op": "return",
      "stack_out": []
    },
    "287": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.create_application",
      "params": {
        "value#0": "uint64",
        "seller#0": "bytes",
        "buyer#0": "bytes",
        "arbitrator#0": "bytes",
        "escrow_duration#0": "uint64"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "290": {
      "op": "bytec_2 // \"value\"",
      "defined_out": [
        "\"value\""
      ],
      "stack_out": [
        "\"value\""
      ]
    },
    "291": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"value\"",
        "value#0 (copy)"
      ],
      "stack_out": [
        "\"value\"",
        "value#0 (copy)"
      ]
    },
    "293": {
      "op": "app_global_put",
      "stack_out": []
    },
    "294": {
      "op": "bytec_3 // \"seller\"",
      "defined_out": [
        "\"seller\""
      ],
      "stack_out": [
        "\"seller\""
      ]
    },
    "295": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ],
      "stack_out": [
        "\"seller\"",
        "seller#0 (copy)"
      ]
    },
    "297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "298": {
      "op": "bytec_1 // \"buyer\"",
      "defined_out": [
        "\"buyer\""
      ],
      "stack_out": [
        "\"buyer\""
      ]
    },
    "299": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"buyer\"",
        "buyer#0 (copy)"
      ],
      "stack_out": [
        "\"buyer\"",
        "buyer#0 (copy)"
      ]
    },
    "301": {
      "op": "app_global_put",
      "stack_out": []
    },
    "302": {
      "op": "bytec 4 // \"arbitrator\"",
      "defined_out": [
        "\"arbitrator\""
      ],
      "stack_out": [
        "\"arbitrator\""
      ]
    },
    "304": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"arbitrator\"",
        "arbitrator#0 (copy)"
      ],
      "stack_out": [
        "\"arbitrator\"",
        "arbitrator#0 (copy)"
      ]
    },
    "306": {
      "op": "app_global_put",
      "stack_out": []
    },
    "307": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "309": {
      "op": "frame_dig -1",
      "defined_out": [
        "escrow_duration#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow_duration#0 (copy)"
      ]
    },
    "311": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "312": {
      "op": "bytec 6 // \"escrow_expiry\"",
      "defined_out": [
        "\"escrow_expiry\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"escrow_expiry\""
      ]
    },
    "314": {
      "op": "swap",
      "stack_out": [
        "\"escrow_expiry\"",
        "new_state_value%0#0"
      ]
    },
    "315": {
      "op": "app_global_put",
      "stack_out": []
    },
    "316": {
      "op": "bytec 5 // \"is_disputed\"",
      "defined_out": [
        "\"is_disputed\""
      ],
      "stack_out": [
        "\"is_disputed\""
      ]
    },
    "318": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"is_disputed\"",
        "0"
      ],
      "stack_out": [
        "\"is_disputed\"",
        "0"
      ]
    },
    "319": {
      "op": "app_global_put",
      "stack_out": []
    },
    "320": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\""
      ],
      "stack_out": [
        "\"is_settled\""
      ]
    },
    "321": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"is_settled\"",
        "0"
      ]
    },
    "322": {
      "op": "app_global_put",
      "stack_out": []
    },
    "323": {
      "retsub": true,
      "op": "retsub"
    },
    "324": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.deposit_funds",
      "params": {
        "payment#0": "uint64"
      },
      "block": "deposit_funds",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "327": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "329": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "330": {
      "op": "bytec_1 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"buyer\""
      ]
    },
    "331": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "332": {
      "error": "check self.buyer exists",
      "op": "assert // check self.buyer exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "333": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "334": {
      "error": "Only the buyer can deposit funds",
      "op": "assert // Only the buyer can deposit funds",
      "stack_out": []
    },
    "335": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "337": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "339": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "341": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "342": {
      "error": "Payment must be sent to the escrow",
      "op": "assert // Payment must be sent to the escrow",
      "stack_out": []
    },
    "343": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "345": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "347": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "348": {
      "op": "bytec_2 // \"value\"",
      "defined_out": [
        "\"value\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"value\""
      ]
    },
    "349": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "350": {
      "error": "check self.value exists",
      "op": "assert // check self.value exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%1#0"
      ]
    },
    "351": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "352": {
      "error": "Payment must match the asset price",
      "op": "assert // Payment must match the asset price",
      "stack_out": []
    },
    "353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "354": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_settled\""
      ]
    },
    "355": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "356": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "357": {
      "op": "!",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "358": {
      "error": "Transaction is already settled",
      "op": "assert // Transaction is already settled",
      "stack_out": []
    },
    "359": {
      "retsub": true,
      "op": "retsub"
    },
    "360": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.release_funds_to_seller",
      "params": {},
      "block": "release_funds_to_seller",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "363": {
      "op": "txn Sender"
    },
    "365": {
      "op": "dup"
    },
    "366": {
      "op": "intc_0 // 0"
    },
    "367": {
      "op": "bytec_1 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "0",
        "\"buyer\""
      ]
    },
    "368": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "369": {
      "error": "check self.buyer exists",
      "op": "assert // check self.buyer exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "371": {
      "op": "bytec 4 // \"arbitrator\"",
      "defined_out": [
        "\"arbitrator\"",
        "0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "0",
        "\"arbitrator\""
      ]
    },
    "373": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "374": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "375": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "377": {
      "error": "check self.arbitrator exists",
      "op": "assert // check self.arbitrator exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "378": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "bnz release_funds_to_seller_bool_true@2",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "382": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "384": {
      "op": "frame_dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "386": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "387": {
      "op": "bz release_funds_to_seller_bool_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "390": {
      "block": "release_funds_to_seller_bool_true@2",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ]
    },
    "391": {
      "block": "release_funds_to_seller_bool_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ],
      "error": "Only buyer or arbitrator can release funds",
      "op": "assert // Only buyer or arbitrator can release funds",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "392": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "393": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0",
        "\"is_settled\""
      ]
    },
    "394": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "395": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "396": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "397": {
      "error": "Transaction is already settled",
      "op": "assert // Transaction is already settled",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "398": {
      "op": "itxn_begin"
    },
    "399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "400": {
      "op": "bytec_3 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0",
        "\"seller\""
      ]
    },
    "401": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "402": {
      "error": "check self.seller exists",
      "op": "assert // check self.seller exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ]
    },
    "403": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "404": {
      "op": "bytec_2 // \"value\"",
      "defined_out": [
        "\"value\"",
        "0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "0",
        "\"value\""
      ]
    },
    "405": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "406": {
      "error": "check self.value exists",
      "op": "assert // check self.value exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "407": {
      "op": "itxn_field Amount",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ]
    },
    "409": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "411": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "pay"
      ]
    },
    "412": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "414": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "1000"
      ]
    },
    "415": {
      "op": "itxn_field Fee",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "417": {
      "op": "itxn_submit"
    },
    "418": {
      "op": "bytec_0 // \"is_settled\"",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "\"is_settled\""
      ]
    },
    "419": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_settled\"",
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "\"is_settled\"",
        "1"
      ]
    },
    "420": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "421": {
      "retsub": true,
      "op": "retsub"
    },
    "422": {
      "block": "release_funds_to_seller_bool_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ]
    },
    "423": {
      "op": "b release_funds_to_seller_bool_merge@4"
    },
    "426": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.refund_funds_to_buyer",
      "params": {},
      "block": "refund_funds_to_buyer",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "429": {
      "op": "txn Sender"
    },
    "431": {
      "op": "dup"
    },
    "432": {
      "op": "intc_0 // 0"
    },
    "433": {
      "op": "bytec_3 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "0",
        "\"seller\""
      ]
    },
    "434": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "435": {
      "error": "check self.seller exists",
      "op": "assert // check self.seller exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "436": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "437": {
      "op": "bytec 4 // \"arbitrator\"",
      "defined_out": [
        "\"arbitrator\"",
        "0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "0",
        "\"arbitrator\""
      ]
    },
    "439": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "440": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "441": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "443": {
      "error": "check self.arbitrator exists",
      "op": "assert // check self.arbitrator exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "444": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "bnz refund_funds_to_buyer_bool_true@2",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "448": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "450": {
      "op": "frame_dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "452": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "453": {
      "op": "bz refund_funds_to_buyer_bool_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "456": {
      "block": "refund_funds_to_buyer_bool_true@2",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ]
    },
    "457": {
      "block": "refund_funds_to_buyer_bool_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ],
      "error": "Only seller or arbitrator can refund funds",
      "op": "assert // Only seller or arbitrator can refund funds",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "458": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "459": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0",
        "\"is_settled\""
      ]
    },
    "460": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "461": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "462": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "463": {
      "error": "Transaction is already settled",
      "op": "assert // Transaction is already settled",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "464": {
      "op": "itxn_begin"
    },
    "465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "466": {
      "op": "bytec_1 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0",
        "\"buyer\""
      ]
    },
    "467": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "468": {
      "error": "check self.buyer exists",
      "op": "assert // check self.buyer exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ]
    },
    "469": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "470": {
      "op": "bytec_2 // \"value\"",
      "defined_out": [
        "\"value\"",
        "0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "0",
        "\"value\""
      ]
    },
    "471": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "472": {
      "error": "check self.value exists",
      "op": "assert // check self.value exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "473": {
      "op": "itxn_field Amount",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ]
    },
    "475": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "477": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "pay"
      ]
    },
    "478": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "480": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "1000"
      ]
    },
    "481": {
      "op": "itxn_field Fee",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "483": {
      "op": "itxn_submit"
    },
    "484": {
      "op": "bytec_0 // \"is_settled\"",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "\"is_settled\""
      ]
    },
    "485": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_settled\"",
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "\"is_settled\"",
        "1"
      ]
    },
    "486": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "487": {
      "retsub": true,
      "op": "retsub"
    },
    "488": {
      "block": "refund_funds_to_buyer_bool_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ]
    },
    "489": {
      "op": "b refund_funds_to_buyer_bool_merge@4"
    },
    "492": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.raise_dispute",
      "params": {},
      "block": "raise_dispute",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "495": {
      "op": "txn Sender"
    },
    "497": {
      "op": "dup"
    },
    "498": {
      "op": "intc_0 // 0"
    },
    "499": {
      "op": "bytec_1 // \"buyer\"",
      "defined_out": [
        "\"buyer\"",
        "0",
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "0",
        "\"buyer\""
      ]
    },
    "500": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "501": {
      "error": "check self.buyer exists",
      "op": "assert // check self.buyer exists",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "503": {
      "op": "bytec_3 // \"seller\"",
      "defined_out": [
        "\"seller\"",
        "0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "0",
        "\"seller\""
      ]
    },
    "504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "505": {
      "op": "swap",
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "506": {
      "op": "cover 3",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "508": {
      "error": "check self.seller exists",
      "op": "assert // check self.seller exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "509": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ]
    },
    "510": {
      "op": "bnz raise_dispute_bool_true@2",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "513": {
      "op": "frame_dig 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0"
      ]
    },
    "515": {
      "op": "frame_dig 1",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "518": {
      "op": "bz raise_dispute_bool_false@3",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "521": {
      "block": "raise_dispute_bool_true@2",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ]
    },
    "522": {
      "block": "raise_dispute_bool_merge@4",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ],
      "error": "Only buyer or seller can raise a dispute",
      "op": "assert // Only buyer or seller can raise a dispute",
      "defined_out": [],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "523": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "524": {
      "op": "bytec 5 // \"is_disputed\"",
      "defined_out": [
        "\"is_disputed\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0",
        "\"is_disputed\""
      ]
    },
    "526": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "527": {
      "error": "check self.is_disputed exists",
      "op": "assert // check self.is_disputed exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "528": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ]
    },
    "529": {
      "error": "Dispute already raised",
      "op": "assert // Dispute already raised",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "531": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "0",
        "\"is_settled\""
      ]
    },
    "532": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "533": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "maybe_value%3#0"
      ]
    },
    "534": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "tmp%3#0"
      ]
    },
    "535": {
      "error": "Transaction is already settled",
      "op": "assert // Transaction is already settled",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "536": {
      "op": "bytec 5 // \"is_disputed\"",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "\"is_disputed\""
      ]
    },
    "538": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_disputed\"",
        "1"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "\"is_disputed\"",
        "1"
      ]
    },
    "539": {
      "op": "app_global_put",
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "540": {
      "retsub": true,
      "op": "retsub"
    },
    "541": {
      "block": "raise_dispute_bool_false@3",
      "stack_in": [
        "awst_tmp%0#0",
        "maybe_value%1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "maybe_value%1#0",
        "or_result%0#0"
      ]
    },
    "542": {
      "op": "b raise_dispute_bool_merge@4"
    },
    "545": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.resolve_dispute",
      "params": {
        "decision#0": "bytes"
      },
      "block": "resolve_dispute",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "548": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "550": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "551": {
      "op": "bytec 4 // \"arbitrator\"",
      "defined_out": [
        "\"arbitrator\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"arbitrator\""
      ]
    },
    "553": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "554": {
      "error": "check self.arbitrator exists",
      "op": "assert // check self.arbitrator exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "555": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "556": {
      "error": "Only the arbitrator can resolve disputes",
      "op": "assert // Only the arbitrator can resolve disputes",
      "stack_out": []
    },
    "557": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "558": {
      "op": "bytec 5 // \"is_disputed\"",
      "defined_out": [
        "\"is_disputed\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_disputed\""
      ]
    },
    "560": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "561": {
      "error": "check self.is_disputed exists",
      "op": "assert // check self.is_disputed exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "562": {
      "error": "No dispute to resolve",
      "op": "assert // No dispute to resolve",
      "stack_out": []
    },
    "563": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "564": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_settled\""
      ]
    },
    "565": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "566": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "567": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "568": {
      "error": "Transaction is already settled",
      "op": "assert // Transaction is already settled",
      "stack_out": []
    },
    "569": {
      "op": "frame_dig -1",
      "defined_out": [
        "decision#0 (copy)"
      ],
      "stack_out": [
        "decision#0 (copy)"
      ]
    },
    "571": {
      "op": "pushbytes \"release_to_seller\"",
      "defined_out": [
        "\"release_to_seller\"",
        "decision#0 (copy)"
      ],
      "stack_out": [
        "decision#0 (copy)",
        "\"release_to_seller\""
      ]
    },
    "590": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "591": {
      "op": "bz resolve_dispute_else_body@2",
      "stack_out": []
    },
    "594": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.release_funds_to_seller",
      "op": "callsub release_funds_to_seller"
    },
    "597": {
      "block": "resolve_dispute_after_if_else@6",
      "stack_in": [],
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\""
      ],
      "stack_out": [
        "\"is_settled\""
      ]
    },
    "598": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_settled\"",
        "1"
      ],
      "stack_out": [
        "\"is_settled\"",
        "1"
      ]
    },
    "599": {
      "op": "app_global_put",
      "stack_out": []
    },
    "600": {
      "retsub": true,
      "op": "retsub"
    },
    "601": {
      "block": "resolve_dispute_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "decision#0 (copy)"
      ],
      "stack_out": [
        "decision#0 (copy)"
      ]
    },
    "603": {
      "op": "pushbytes \"refund_to_buyer\"",
      "defined_out": [
        "\"refund_to_buyer\"",
        "decision#0 (copy)"
      ],
      "stack_out": [
        "decision#0 (copy)",
        "\"refund_to_buyer\""
      ]
    },
    "620": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "621": {
      "error": "Invalid decision",
      "op": "assert // Invalid decision",
      "stack_out": []
    },
    "622": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.refund_funds_to_buyer",
      "op": "callsub refund_funds_to_buyer"
    },
    "625": {
      "op": "b resolve_dispute_after_if_else@6"
    },
    "628": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.expire_escrow",
      "params": {},
      "block": "expire_escrow",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "630": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "631": {
      "op": "bytec 6 // \"escrow_expiry\"",
      "defined_out": [
        "\"escrow_expiry\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"escrow_expiry\""
      ]
    },
    "633": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "634": {
      "error": "check self.escrow_expiry exists",
      "op": "assert // check self.escrow_expiry exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "635": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "636": {
      "error": "Escrow has not expired yet",
      "op": "assert // Escrow has not expired yet",
      "stack_out": []
    },
    "637": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "638": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_settled\""
      ]
    },
    "639": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "640": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "641": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "642": {
      "error": "Transaction is already settled",
      "op": "assert // Transaction is already settled",
      "stack_out": []
    },
    "643": {
      "callsub": "smart_contracts.escrow_contract.contract.Escrow.refund_funds_to_buyer",
      "op": "callsub refund_funds_to_buyer"
    },
    "646": {
      "retsub": true,
      "op": "retsub"
    },
    "647": {
      "subroutine": "smart_contracts.escrow_contract.contract.Escrow.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "648": {
      "op": "bytec_0 // \"is_settled\"",
      "defined_out": [
        "\"is_settled\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_settled\""
      ]
    },
    "649": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "650": {
      "error": "check self.is_settled exists",
      "op": "assert // check self.is_settled exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "651": {
      "error": "Transaction must be settled before deleting",
      "op": "assert // Transaction must be settled before deleting",
      "stack_out": []
    },
    "652": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "654": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "656": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "657": {
      "error": "Only the creator can delete the application",
      "op": "assert // Only the creator can delete the application",
      "stack_out": []
    },
    "658": {
      "retsub": true,
      "op": "retsub"
    }
  }
}